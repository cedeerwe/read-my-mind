{"version":3,"sources":["game/types.tsx","constants.tsx","game/actions.tsx","game/RPS.tsx","game/stats.tsx","game/utils.tsx","game/game.tsx","game/opponents.tsx","game/state.tsx","game/reducer.tsx","game/store.tsx","components/ScoreCell.tsx","components/GameStats.tsx","components/Weapons.tsx","utils.tsx","components/WeaponButton.tsx","components/WeaponBar.tsx","components/GameControls.tsx","components/ColoredWeaponCell.tsx","components/ColoredResultCell.tsx","components/HistoryTable.tsx","components/OpponentSpan.tsx","components/Game.tsx","components/SummaryTable.tsx","components/Summary.tsx","components/Intro.tsx","components/MainView.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Weapon","BattleResult","NUM_ROUNDS","TOTAL_ROUNDS","resetState","createAction","resetStateModal","battleOpponent","changeOpponent","incrementOpponent","decrementOpponent","switchViewToBasic","switchViewToGame","switchViewToIntro","resetOpponent","AppView","initialBasicStats","wins","draws","losses","score","initialStats","current","best","rounds","beatenBy","w","Rock","Paper","Scissors","Error","randomWeaponPopulation","rocks","papers","scissors","sum","rand","Math","random","randomWeapon","baseStats","addResultToStats","stats","result","Win","Draw","Loss","addResultToBasicStats","checkBestStats","getOpponent","opponentId","allOpponents","getActiveGame","state","games","activeGameId","getActiveOpponent","countHistoryOpponentWeapons","history","reduce","pv","cv","opponent","addBattleToGame","me","fight","game","resetGame","replaceGame","gameId","f","map","i","oneWeapon","name","icon","faDumbbell","generateWeapon","length","par","beatLast","faHammer","randomAlternate","faQuestion","twoWeapons","faCookieBite","mostWinning","faGraduationCap","battle","maxWins","max","Object","values","threshold","num","randomGuy","faBookDead","favoriteWeapon","faGift","proportionalBeat","faGrinSquintTears","initialState","_","op","activeView","Intro","reducer","createReducer","handleAction","actions","BasicWithModal","action","payload","Basic","Game","persistedState","localStorage","getItem","store","createStore","JSON","parse","subscribe","setItem","stringify","getState","ScoreCell","total","style","backgroundColor","GameStats","connect","Table","bordered","hover","WeaponSpan","weapon","faHandRock","faHandPaper","faHandScissors","weaponToString","buttonStyle","margin","WeaponButton","onClick","disabled","variant","Button","size","WeaponBar","isFinished","dispatch","Container","Row","justifyContent","GameControls","onClickNext","onClickPrevious","onClickReset","onClickBack","ColoredWeaponCell","color","ColoredResultCell","r","resultToString","HistoryTable","end","striped","Array","from","OpponentSpan","Col","SummaryTable","allStats","showModal","onClickPlay","onClickModal","onHide","display","faTrashAlt","faPlay","Modal","show","Header","closeButton","Title","Body","Footer","Summary","className","fontSize","MainView","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1e2091e3.chunk.js","sourcesContent":["import { IconDefinition } from '@fortawesome/fontawesome-svg-core';\n\n// GAME LOGIC\n\nexport enum Weapon {\n  Rock = 0,\n  Paper = 1,\n  Scissors = 2\n}\n\nexport enum BattleResult {\n  Win = 'ResultWin',\n  Draw = 'ResultDraw',\n  Loss = 'ResultLoss'\n}\n\nexport type Battle = {\n  me: Weapon;\n  opponent: Weapon;\n  result: BattleResult;\n};\n\nexport type BasicStats = {\n  wins: number;\n  draws: number;\n  losses: number;\n  score: number;\n};\n\nexport type GameStats = {\n  current: BasicStats;\n  best: BasicStats;\n  rounds: number;\n};\n\nexport const initialBasicStats: BasicStats = {\n  wins: 0,\n  draws: 0,\n  losses: 0,\n  score: 0\n};\n\nexport const initialStats: GameStats = {\n  current: initialBasicStats,\n  best: initialBasicStats,\n  rounds: 0\n};\n\nexport type BattleHistory = Battle[];\n\nexport interface Opponent {\n  name: string;\n  icon: IconDefinition;\n  generateWeapon: (history: BattleHistory) => Weapon;\n  par: number;\n  state?: any;\n}\n\nexport type Game = {\n  opponentId: number;\n  history: BattleHistory;\n  stats: GameStats;\n};\n\nexport const initGame = (opponentId: number) => ({\n  opponentId,\n  history: [],\n  stats: initialStats\n});\n\n// VIEWS\n\nexport enum AppView {\n  Intro = 'AppViewIntro',\n  Basic = 'AppViewBasic',\n  BasicWithModal = 'AppViewBasicWithModal',\n  Game = 'AppViewGame'\n}\n","// GAME\nexport const NUM_ROUNDS = 20;\nexport const TOTAL_ROUNDS = 100;\n\n// FIELDS\nexport const LOCAL_STORE_STATE = 'reduxState';\n","import {} from '../constants';\nimport { Weapon } from './types';\nimport { createAction } from 'typesafe-actions';\n\n// ACTIONS\nconst RESET_STATE = 'resetState';\nconst RESET_STATE_MODAL = 'resetStateModal';\nconst BATTLE_OPPONENT = 'battleOpponent';\nconst CHANGE_OPPONENT = 'changeOpponent';\nconst INCREMENT_OPPONENT = 'incrementOpponent';\nconst DECREMENT_OPPONENT = 'decrementOpponent';\nconst SWITCH_VIEW_TO_BASIC = 'switchViewToBasic';\nconst SWITCH_VIEW_TO_GAME = 'switchViewToGame';\nconst SWITCH_VIEW_TO_INTRO = 'switchViewToIntro';\nconst RESET_OPPONENT = 'resetOpponent';\n\nexport const resetState = createAction(RESET_STATE)();\nexport const resetStateModal = createAction(RESET_STATE_MODAL)();\nexport const battleOpponent = createAction(BATTLE_OPPONENT)<Weapon>();\nexport const changeOpponent = createAction(CHANGE_OPPONENT)<number>();\nexport const incrementOpponent = createAction(INCREMENT_OPPONENT)();\nexport const decrementOpponent = createAction(DECREMENT_OPPONENT)();\nexport const switchViewToBasic = createAction(SWITCH_VIEW_TO_BASIC)();\nexport const switchViewToGame = createAction(SWITCH_VIEW_TO_GAME)<number>();\nexport const switchViewToIntro = createAction(SWITCH_VIEW_TO_INTRO)();\nexport const resetOpponent = createAction(RESET_OPPONENT)();\n// export const resetState = () => action(RESET_STATE);\n// export const resetStateModal = () => action(RESET_STATE_MODAL);\n// export const battleOpponent = (me: Weapon) => action(BATTLE_OPPONENT, { me });\n// export const changeOpponent = (newId: number) =>\n// action(CHANGE_OPPONENT, { newId });\n// export const incrementOpponent = () => action(INCREMENT_OPPONENT);\n// export const decrementOpponent = () => action(DECREMENT_OPPONENT);\n// export const switchViewToBasic = () => action(SWITCH_VIEW_TO_BASIC);\n// export const switchViewToGame = (gameId: number) =>\n// action(SWITCH_VIEW_TO_GAME, { gameId });\n// export const switchViewToIntro = () => action(SWITCH_VIEW_TO_INTRO);\n// export const resetOpponent = () => action(RESET_OPPONENT);\n","import { Weapon, BattleResult } from './types'\n\nexport function fight(me: Weapon, opponent: Weapon): BattleResult {\n  switch ((me - opponent + 3) % 3) {\n    case 0:\n      return BattleResult.Draw\n    case 1:\n      return BattleResult.Win\n    case 2:\n      return BattleResult.Loss\n    default:\n      throw Error('WRONG REMAINDER')\n  }\n}\n\nexport function beatenBy(w: Weapon): Weapon {\n  switch (w) {\n    case Weapon.Rock:\n      return Weapon.Paper\n    case Weapon.Paper:\n      return Weapon.Scissors\n    case Weapon.Scissors:\n      return Weapon.Rock\n    default:\n      throw new Error('Enum switch')\n  }\n}\n\nexport function randomWeaponPopulation(rocks: number, papers: number, scissors: number): Weapon {\n  const sum = rocks + papers + scissors\n  const rand = Math.random() * sum\n  if (rand < rocks) {\n    return Weapon.Rock\n  } if (rand < rocks + papers) {\n    return Weapon.Paper\n  }\n  return Weapon.Scissors\n}\n\nexport function randomWeapon(): Weapon {\n  return randomWeaponPopulation(1, 1, 1)\n}\n","import { BasicStats, BattleResult, GameStats } from './types'\n\nconst baseStats: BasicStats = {\n  wins: 0, draws: 0, losses: 0, score: 0,\n}\n\nexport function addResultToBasicStats(stats: BasicStats, result: BattleResult): BasicStats {\n  switch (result) {\n    case BattleResult.Win:\n      return { ...stats, wins: stats.wins + 1, score: stats.score + 1 }\n    case BattleResult.Draw:\n      return { ...stats, draws: stats.draws + 1, score: stats.score + 0.5 }\n    case BattleResult.Loss:\n      return { ...stats, losses: stats.losses + 1 }\n    default:\n      throw new Error('Switching enum')\n  }\n}\n\nexport function checkBestStats(stats: GameStats): GameStats {\n  if (stats.best.score < stats.current.score) {\n    return { ...stats, best: { ...stats.current } }\n  }\n  return stats\n}\n\nexport function addResultToStats(stats: GameStats, result: BattleResult): GameStats {\n  const current = addResultToBasicStats(stats.current, result)\n  return checkBestStats({ ...stats, current, rounds: stats.rounds + 1 })\n}\n\nexport function resetCurrentStats(stats: GameStats): GameStats {\n  return { ...stats, current: baseStats }\n}\n","import { State, allOpponents } from './state';\n\nexport function getOpponent(opponentId: number) {\n  return allOpponents[opponentId];\n}\n\nexport function getActiveGame(state: State) {\n  return state.games[state.activeGameId];\n}\n\nexport function getActiveOpponent(state: State) {\n  return getOpponent(getActiveGame(state).opponentId);\n}\n","import { fight } from './RPS';\nimport { addResultToStats, resetCurrentStats } from './stats';\nimport { NUM_ROUNDS, TOTAL_ROUNDS } from '../constants';\nimport { BattleHistory, Weapon, Game } from './types';\nimport { getOpponent } from './utils';\n\n// HISTORY\n\nexport function countHistoryMeWeapons(\n  history: BattleHistory,\n  w: Weapon\n): number {\n  return history.reduce((pv, cv) => pv + (cv.me === w ? 1 : 0), 0);\n}\n\nexport function countHistoryOpponentWeapons(\n  history: BattleHistory,\n  w: Weapon\n): number {\n  return history.reduce((pv, cv) => pv + (cv.opponent === w ? 1 : 0), 0);\n}\n\n// GAME\n\nexport function generateWeapon(game: Game): Weapon {\n  return getOpponent(game.opponentId).generateWeapon(game.history);\n}\n\nexport function addBattleToGame(\n  me: Weapon,\n  opponent: Weapon\n): (game: Game) => Game {\n  const result = fight(me, opponent);\n  return game => {\n    const history = [...game.history, { me, opponent, result }];\n    const stats = addResultToStats(game.stats, result);\n    return { opponentId: game.opponentId, history, stats };\n  };\n}\n\nexport function isGameFinished(game: Game): boolean {\n  return game.history.length >= NUM_ROUNDS || game.stats.rounds >= TOTAL_ROUNDS;\n}\n\nexport function resetGame(game: Game): Game {\n  return { ...game, history: [], stats: resetCurrentStats(game.stats) };\n}\n\n// GAMES\n\nexport function replaceGame(\n  games: Game[],\n  gameId: number,\n  f: (game: Game) => Game\n): Game[] {\n  return games.map((game, i) => (i === gameId ? f(game) : game));\n}\n","import { randomWeapon, beatenBy, randomWeaponPopulation } from './RPS';\nimport { Opponent, BattleHistory, Weapon, BattleResult } from './types';\nimport { countHistoryOpponentWeapons } from './game';\nimport {\n  faDumbbell,\n  faHammer,\n  faQuestion,\n  faCookieBite,\n  faGraduationCap,\n  faBookDead,\n  faGift,\n  faGrinSquintTears\n} from '@fortawesome/free-solid-svg-icons';\nimport { NUM_ROUNDS } from '../constants';\n\nexport const oneWeapon: Opponent = {\n  name: 'Alan the Almighty',\n  icon: faDumbbell,\n  generateWeapon: (history: BattleHistory) => {\n    if (history.length === 0) {\n      return randomWeapon();\n    }\n    return history[0].opponent;\n  },\n  par: NUM_ROUNDS - 0.5\n};\n\nexport const beatLast: Opponent = {\n  name: 'Beatrice the Brutal',\n  icon: faHammer,\n  generateWeapon: (history: BattleHistory) => {\n    if (history.length === 0) {\n      return randomWeapon();\n    }\n    return beatenBy(history[history.length - 1].me);\n  },\n  par: NUM_ROUNDS - 0.5\n};\n\nexport const randomAlternate: Opponent = {\n  name: 'Cedric the Confused',\n  icon: faQuestion,\n  generateWeapon: (history: BattleHistory) => {\n    if (history.length === 0) {\n      return randomWeapon();\n    }\n    const { opponent } = history[history.length - 1];\n    switch (opponent) {\n      case Weapon.Rock:\n        return randomWeaponPopulation(0, 1, 1);\n      case Weapon.Paper:\n        return randomWeaponPopulation(1, 0, 1);\n      case Weapon.Scissors:\n        return randomWeaponPopulation(1, 1, 0);\n      default:\n        throw new Error('Switching enum');\n    }\n  },\n  par: 0.5 + 0.75 * (NUM_ROUNDS - 1)\n};\n\nexport const twoWeapons: Opponent = {\n  name: 'Damian the Delicious',\n  icon: faCookieBite,\n  generateWeapon: (history: BattleHistory) => {\n    if (history.length === 0) {\n      switch (randomWeapon()) {\n        case Weapon.Rock:\n          twoWeapons.state = [0, 1, 1];\n          break;\n        case Weapon.Paper:\n          twoWeapons.state = [1, 0, 1];\n          break;\n        case Weapon.Scissors:\n          twoWeapons.state = [1, 1, 0];\n          break;\n        default:\n          break;\n      }\n    }\n    return randomWeaponPopulation(\n      twoWeapons.state[0],\n      twoWeapons.state[1],\n      twoWeapons.state[2]\n    );\n  },\n  state: [0, 0, 0],\n  par: 0.5 + 0.75 * (NUM_ROUNDS - 1)\n};\n\nexport const mostWinning: Opponent = {\n  name: 'Edward the Educated',\n  icon: faGraduationCap,\n  generateWeapon: (history: BattleHistory) => {\n    const wins = history.reduce(\n      (pv, battle) => {\n        switch (battle.result) {\n          case BattleResult.Draw:\n            return pv;\n          case BattleResult.Win:\n            return { ...pv, [battle.me]: pv[battle.me] + 1 };\n          case BattleResult.Loss:\n            return { ...pv, [battle.opponent]: pv[battle.opponent] + 1 };\n          default:\n            throw new Error('Switching enum');\n        }\n      },\n      { [Weapon.Rock]: 0, [Weapon.Paper]: 0, [Weapon.Scissors]: 0 }\n    );\n    const maxWins = Math.max(...Object.values(wins));\n    if (maxWins === 0) {\n      return randomWeapon();\n    }\n    const threshold = (num: number) => (num === maxWins ? maxWins : 0);\n    return randomWeaponPopulation(\n      threshold(wins[Weapon.Rock]),\n      threshold(wins[Weapon.Paper]),\n      threshold(wins[Weapon.Scissors])\n    );\n  },\n  par: 0.75 * NUM_ROUNDS\n};\n\nexport const randomGuy: Opponent = {\n  name: 'Florian the Fallen',\n  icon: faBookDead,\n  generateWeapon: () => randomWeapon(),\n  par: NUM_ROUNDS / 2 + 1\n};\n\nexport const favoriteWeapon: Opponent = {\n  name: 'Gregory the Generous',\n  icon: faGift,\n  generateWeapon: (history: BattleHistory) => {\n    if (history.length === 0) {\n      switch (randomWeapon()) {\n        case Weapon.Rock:\n          twoWeapons.state = [2, 1, 1];\n          break;\n        case Weapon.Paper:\n          twoWeapons.state = [1, 2, 1];\n          break;\n        case Weapon.Scissors:\n          twoWeapons.state = [1, 1, 2];\n          break;\n        default:\n          break;\n      }\n    }\n    return randomWeaponPopulation(\n      twoWeapons.state[0],\n      twoWeapons.state[1],\n      twoWeapons.state[2]\n    );\n  },\n  state: [0, 0, 0],\n  par: 0.625 * NUM_ROUNDS\n};\n\nexport const proportionalBeat: Opponent = {\n  name: 'Hugo the Hilarious',\n  icon: faGrinSquintTears,\n  generateWeapon: (history: BattleHistory) => {\n    if (history.length === 0) {\n      return randomWeapon();\n    }\n    const rocks = countHistoryOpponentWeapons(history, Weapon.Rock);\n    const papers = countHistoryOpponentWeapons(history, Weapon.Paper);\n    const scissors = countHistoryOpponentWeapons(history, Weapon.Scissors);\n    return beatenBy(beatenBy(randomWeaponPopulation(rocks, papers, scissors)));\n  },\n  par: (2 / 3) * NUM_ROUNDS\n};\n","import {\n  oneWeapon,\n  beatLast,\n  randomAlternate,\n  twoWeapons,\n  mostWinning,\n  randomGuy,\n  favoriteWeapon,\n  proportionalBeat\n} from './opponents';\nimport { Game, AppView, initGame } from './types';\n\n// STATE\n\nexport type State = {\n  games: Game[];\n  activeGameId: number;\n  activeView: AppView;\n};\n\nexport const allOpponents = [\n  oneWeapon,\n  beatLast,\n  randomAlternate,\n  twoWeapons,\n  mostWinning,\n  randomGuy,\n  favoriteWeapon,\n  proportionalBeat\n];\n\nexport const initialState: State = {\n  games: allOpponents.map((_, op) => initGame(op)),\n  activeGameId: 0,\n  activeView: AppView.Intro\n};\n","import { ActionType, createReducer, Reducer } from 'typesafe-actions';\nimport * as actions from './actions';\nimport { State, initialState } from './state';\nimport {\n  generateWeapon,\n  replaceGame,\n  addBattleToGame,\n  resetGame\n} from './game';\nimport { AppView } from './types';\n\nexport type RootAction = ActionType<typeof actions>;\n\nexport const reducer: Reducer<State, RootAction> = createReducer<\n  State,\n  RootAction\n>(initialState)\n  .handleAction(actions.resetState, state => ({ ...initialState }))\n  .handleAction(actions.resetStateModal, state => ({\n    ...state,\n    activeView: AppView.BasicWithModal\n  }))\n  .handleAction(actions.battleOpponent, (state, action) => {\n    const opponent = generateWeapon(state.games[state.activeGameId]);\n    const games = replaceGame(\n      state.games,\n      state.activeGameId,\n      addBattleToGame(action.payload, opponent)\n    );\n    return { ...state, games };\n  })\n  .handleAction(actions.changeOpponent, (state, action) => ({\n    ...state,\n    activeGameId: (action.payload + state.games.length) % state.games.length\n  }))\n  .handleAction(actions.incrementOpponent, state =>\n    reducer(state, actions.changeOpponent(state.activeGameId + 1))\n  )\n  .handleAction(actions.decrementOpponent, state =>\n    reducer(state, actions.changeOpponent(state.activeGameId - 1))\n  )\n  .handleAction(actions.switchViewToBasic, state => ({\n    ...state,\n    activeView: AppView.Basic\n  }))\n  .handleAction(actions.switchViewToIntro, state => ({\n    ...state,\n    activeView: AppView.Intro\n  }))\n  .handleAction(actions.switchViewToGame, (state, action) => ({\n    ...state,\n    activeView: AppView.Game,\n    activeGameId: action.payload\n  }))\n  .handleAction(actions.resetOpponent, state => ({\n    ...state,\n    games: replaceGame(state.games, state.activeGameId, resetGame)\n  }));\n","import { createStore } from 'redux';\nimport { reducer } from './reducer';\nimport { initialState } from './state';\nimport { LOCAL_STORE_STATE } from '../constants';\n\nconst persistedState = localStorage.getItem(LOCAL_STORE_STATE);\n\nexport const store = createStore(\n  reducer,\n  persistedState ? JSON.parse(persistedState) : initialState\n);\n\nstore.subscribe(() =>\n  localStorage.setItem(LOCAL_STORE_STATE, JSON.stringify(store.getState()))\n);\n","import React from 'react';\n\ntype Props = {\n  par: number;\n  score: number;\n  total: number;\n};\n\nexport const ScoreCell: React.FC<Props> = ({ par, score, total }) => {\n  const style = score >= par ? { backgroundColor: 'LightGreen' } : {};\n  return (\n    <th style={style}>\n      {score} / {total}\n    </th>\n  );\n};\n","import React from 'react';\nimport Table from 'react-bootstrap/Table';\nimport { connect } from 'react-redux';\nimport { State } from '../game/state';\nimport { getActiveGame, getActiveOpponent } from '../game/utils';\nimport { ScoreCell } from './ScoreCell';\nimport { NUM_ROUNDS } from '../constants';\n\nconst mapStateToProps = (state: State) => ({\n  stats: getActiveGame(state).stats,\n  par: getActiveOpponent(state).par\n});\n\ntype GameStatsProps = ReturnType<typeof mapStateToProps>;\n\nexport const _GameStats: React.FC<GameStatsProps> = ({ stats, par }) => (\n  <Table bordered hover>\n    <thead>\n      <tr>\n        <th>Total Rounds: {stats.rounds} </th>\n        <th>Wins</th>\n        <th>Losses</th>\n        <th>Draws</th>\n        <th>Score</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr>\n        <th>\n          <b>Current</b>\n        </th>\n        <th>{stats.current.wins}</th>\n        <th>{stats.current.losses}</th>\n        <th>{stats.current.draws}</th>\n        <ScoreCell par={par} score={stats.current.score} total={NUM_ROUNDS} />\n      </tr>\n      <tr>\n        <th>\n          <b>Best</b>\n        </th>\n        <th>{stats.best.wins}</th>\n        <th>{stats.best.losses}</th>\n        <th>{stats.best.draws}</th>\n        <ScoreCell par={par} score={stats.best.score} total={NUM_ROUNDS} />\n      </tr>\n    </tbody>\n  </Table>\n);\n\nexport const GameStats = connect(mapStateToProps)(_GameStats);\n","import { Weapon } from '../game/types';\nimport React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n  faHandRock,\n  faHandPaper,\n  faHandScissors\n} from '@fortawesome/free-solid-svg-icons';\nimport { weaponToString } from '../utils';\n\ntype Props = {\n  weapon: Weapon;\n};\n\nexport const WeaponSpan: React.FC<Props> = ({ weapon }) => {\n  const icon =\n    weapon === Weapon.Rock\n      ? faHandRock\n      : weapon === Weapon.Paper\n      ? faHandPaper\n      : faHandScissors;\n  return (\n    <span>\n      <FontAwesomeIcon icon={icon} /> {weaponToString(weapon)}\n    </span>\n  );\n};\n","import { Weapon, BattleResult } from './game/types'\n\nexport function range(end: number): number[] {\n  return Array.from({ length: end }).map((_, i) => i)\n}\n\nexport function weaponToString(w: Weapon): string {\n  switch (w) {\n    case Weapon.Rock:\n      return 'Rock'\n    case Weapon.Paper:\n      return 'Paper'\n    case Weapon.Scissors:\n      return 'Scissors'\n    default:\n      throw new Error('Switching enum')\n  }\n}\n\nexport function resultToString(r: BattleResult): string {\n  switch (r) {\n    case BattleResult.Win:\n      return 'Win'\n    case BattleResult.Loss:\n      return 'Loss'\n    case BattleResult.Draw:\n      return 'Draw'\n    default:\n      throw new Error('Switching enum')\n  }\n}\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport CSS from 'csstype';\nimport { RootAction } from '../game/reducer';\nimport { Weapon } from '../game/types';\nimport { WeaponSpan } from './Weapons';\n\nconst buttonStyle: CSS.Properties = {\n  margin: '10px'\n};\n\ntype Props = {\n  weapon: Weapon;\n  onClick: (weapon: Weapon) => () => RootAction;\n  disabled: boolean;\n  variant:\n    | 'primary'\n    | 'secondary'\n    | 'success'\n    | 'danger'\n    | 'warning'\n    | 'info'\n    | 'dark'\n    | 'light'\n    | 'link'\n    | 'outline-primary'\n    | 'outline-secondary'\n    | 'outline-success'\n    | 'outline-danger'\n    | 'outline-warning'\n    | 'outline-info'\n    | 'outline-dark'\n    | 'outline-light';\n};\n\nexport const WeaponButton: React.FC<Props> = ({\n  weapon,\n  onClick,\n  disabled,\n  variant\n}) => (\n  <Button\n    style={buttonStyle}\n    variant={variant}\n    size=\"lg\"\n    onClick={onClick(weapon)}\n    disabled={disabled}\n  >\n    <WeaponSpan weapon={weapon} />\n  </Button>\n);\n","import { Dispatch } from 'redux';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport { RootAction } from '../game/reducer';\nimport { State } from '../game/state';\nimport { isGameFinished } from '../game/game';\nimport { WeaponButton } from './WeaponButton';\nimport { Weapon } from '../game/types';\nimport { battleOpponent } from '../game/actions';\n\nconst mapStateToProps = (state: State) => ({\n  isFinished: isGameFinished(state.games[state.activeGameId])\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<RootAction>) => ({\n  onClick: (weapon: Weapon) => () => dispatch(battleOpponent(weapon))\n});\n\ntype WeaponBarProps = ReturnType<typeof mapStateToProps> &\n  ReturnType<typeof mapDispatchToProps>;\n\nconst _WeaponBar: React.FC<WeaponBarProps> = ({ isFinished, onClick }) => (\n  <Container>\n    <Row style={{ justifyContent: 'center' }}>\n      <WeaponButton\n        variant=\"danger\"\n        weapon={Weapon.Rock}\n        onClick={onClick}\n        disabled={isFinished}\n      />\n      <WeaponButton\n        variant=\"success\"\n        weapon={Weapon.Paper}\n        onClick={onClick}\n        disabled={isFinished}\n      />\n      <WeaponButton\n        variant=\"primary\"\n        weapon={Weapon.Scissors}\n        onClick={onClick}\n        disabled={isFinished}\n      />\n    </Row>\n  </Container>\n);\n\nexport const WeaponBar = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(_WeaponBar);\n","import React, { Dispatch } from 'react';\nimport CSS from 'csstype';\nimport Button from 'react-bootstrap/Button';\nimport { connect } from 'react-redux';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport { RootAction } from '../game/reducer';\nimport {\n  incrementOpponent,\n  decrementOpponent,\n  resetOpponent,\n  switchViewToBasic\n} from '../game/actions';\n\nconst buttonStyle: CSS.Properties = {\n  margin: '10px'\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch<RootAction>) => ({\n  onClickNext: () => dispatch(incrementOpponent()),\n  onClickPrevious: () => dispatch(decrementOpponent()),\n  onClickReset: () => dispatch(resetOpponent()),\n  onClickBack: () => dispatch(switchViewToBasic())\n});\n\ntype GameControlProps = ReturnType<typeof mapDispatchToProps>;\n\nconst _GameControls: React.FC<GameControlProps> = ({\n  onClickNext,\n  onClickBack,\n  onClickPrevious,\n  onClickReset\n}) => (\n  <Container>\n    <Row style={{ justifyContent: 'center' }}>\n      <Button style={buttonStyle} variant=\"secondary\" onClick={onClickPrevious}>\n        Previous Opponent\n      </Button>\n      <Button style={buttonStyle} variant=\"secondary\" onClick={onClickNext}>\n        Next Opponent\n      </Button>\n    </Row>\n    <Row style={{ justifyContent: 'center' }}>\n      <Button style={buttonStyle} variant=\"info\" onClick={onClickReset}>\n        Reset Game\n      </Button>\n      <Button style={buttonStyle} variant=\"info\" onClick={onClickBack}>\n        Back to summary\n      </Button>\n    </Row>\n  </Container>\n);\n\nexport const GameControls = connect(null, mapDispatchToProps)(_GameControls);\n","import React from 'react';\nimport { Weapon } from '../game/types';\nimport { WeaponSpan } from './Weapons';\n\ntype Props = {\n  weapon: Weapon;\n};\n\nexport const ColoredWeaponCell: React.FC<Props> = ({ weapon }) => {\n  const color =\n    weapon === Weapon.Rock ? 'red' : weapon === Weapon.Paper ? 'green' : 'blue';\n  return (\n    <th style={{ color }}>\n      <WeaponSpan weapon={weapon} />\n    </th>\n  );\n};\n","import React from 'react';\nimport { BattleResult } from '../game/types';\nimport { resultToString } from '../utils';\n\ntype Props = {\n  result: BattleResult;\n};\n\nexport const ColoredResultCell: React.FC<Props> = ({ result }) => {\n  const color =\n    result === BattleResult.Win\n      ? 'LightGreen'\n      : result === BattleResult.Draw\n      ? 'PaleGoldenRod'\n      : 'Tomato';\n  return <th style={{ backgroundColor: color }}>{resultToString(result)}</th>;\n};\n","import Table from 'react-bootstrap/Table';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { State } from '../game/state';\nimport { NUM_ROUNDS } from '../constants';\nimport { range } from '../utils';\nimport { BattleHistory } from '../game/types';\nimport { ColoredWeaponCell } from './ColoredWeaponCell';\nimport { ColoredResultCell } from './ColoredResultCell';\n\ntype HistoryTableProps = {\n  history: BattleHistory;\n};\n\nconst _HistoryTable: React.FC<HistoryTableProps> = ({ history }) => (\n  <Table striped bordered hover size=\"sm\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>Me</th>\n        <th>Opponent</th>\n        <th>Result</th>\n      </tr>\n    </thead>\n    <tbody>\n      {range(NUM_ROUNDS).map(i => {\n        if (i < history.length) {\n          return (\n            <tr>\n              <th>{i + 1}</th>\n              <ColoredWeaponCell weapon={history[i].me} />\n              <ColoredWeaponCell weapon={history[i].opponent} />\n              <ColoredResultCell result={history[i].result} />\n            </tr>\n          );\n        }\n        return (\n          <tr>\n            <th>{i + 1}</th>\n            <th> </th>\n            <th> </th>\n            <th> </th>\n          </tr>\n        );\n      })}\n    </tbody>\n  </Table>\n);\n\nconst mapStateToProps = (state: State) => ({\n  history: state.games[state.activeGameId].history\n});\n\nexport const HistoryTable = connect(mapStateToProps)(_HistoryTable);\n","import { Opponent } from '../game/types';\nimport React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\ntype Props = {\n  opponent: Opponent;\n};\n\nexport const OpponentSpan: React.FC<Props> = ({ opponent }) => {\n  return (\n    <span>\n      <FontAwesomeIcon icon={opponent.icon} /> {opponent.name}\n    </span>\n  );\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport { State } from '../game/state';\nimport { GameStats } from './GameStats';\nimport { WeaponBar } from './WeaponBar';\nimport { GameControls } from './GameControls';\nimport { HistoryTable } from './HistoryTable';\nimport { getActiveOpponent } from '../game/utils';\nimport { OpponentSpan } from './OpponentSpan';\n\nconst mapStateToProps = (state: State) => ({\n  opponent: getActiveOpponent(state)\n});\n\ntype Props = ReturnType<typeof mapStateToProps>;\n\nconst _Game: React.FC<Props> = ({ opponent }) => (\n  <Container>\n    <Row style={{ justifyContent: 'center' }}>\n      <h1>\n        <OpponentSpan opponent={opponent} />\n      </h1>\n    </Row>\n    <Row>\n      <Col>\n        <GameStats />\n        <GameControls />\n        <hr />\n        <WeaponBar />\n      </Col>\n      <Col>\n        <HistoryTable />\n      </Col>\n    </Row>\n  </Container>\n);\n\nexport const Game = connect(mapStateToProps)(_Game);\n","import Table from 'react-bootstrap/Table';\nimport React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal';\nimport { Dispatch } from 'redux';\nimport { connect } from 'react-redux';\nimport { RootAction } from '../game/reducer';\nimport { NUM_ROUNDS, TOTAL_ROUNDS } from '../constants';\nimport { State } from '../game/state';\nimport { AppView } from '../game/types';\nimport { getOpponent } from '../game/utils';\nimport { OpponentSpan } from './OpponentSpan';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlay, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\nimport { ScoreCell } from './ScoreCell';\nimport {\n  switchViewToGame,\n  resetStateModal,\n  resetState,\n  switchViewToBasic\n} from '../game/actions';\n\nconst mapStateToProps = (state: State) => ({\n  allStats: state.games.map(game => game.stats),\n  allOpponents: state.games.map(game => getOpponent(game.opponentId)),\n  showModal: state.activeView === AppView.BasicWithModal\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<RootAction>) => ({\n  onClickPlay: (i: number) => () => dispatch(switchViewToGame(i)),\n  onClickModal: () => dispatch(resetStateModal()),\n  onClickReset: () => dispatch(resetState()),\n  onHide: () => dispatch(switchViewToBasic())\n});\n\ntype Props = ReturnType<typeof mapStateToProps> &\n  ReturnType<typeof mapDispatchToProps>;\n\nconst _SummaryTable: React.FC<Props> = ({\n  allStats,\n  allOpponents,\n  onClickPlay,\n  onClickReset,\n  onClickModal,\n  showModal,\n  onHide\n}) => (\n  <>\n    <Table bordered striped hover>\n      <thead>\n        <tr>\n          <th>Opponent</th>\n          <th>Best Wins</th>\n          <th>Best Losses</th>\n          <th>Best Draws</th>\n          <th>Best Score</th>\n          <th>Total Rounds</th>\n          <th>\n            <Button\n              variant=\"danger\"\n              onClick={onClickModal}\n              style={{ margin: 'auto', display: 'block' }}\n            >\n              <FontAwesomeIcon icon={faTrashAlt} />\n            </Button>\n          </th>\n        </tr>\n      </thead>\n      <tbody>\n        {allStats.map((stats, i) => (\n          <tr>\n            <th>\n              <OpponentSpan opponent={allOpponents[i]} />\n            </th>\n            <th>{stats.best.wins}</th>\n            <th>{stats.best.losses}</th>\n            <th>{stats.best.draws}</th>\n            <ScoreCell\n              par={allOpponents[i].par}\n              score={stats.best.score}\n              total={NUM_ROUNDS}\n            />\n            <th>\n              {stats.rounds} / {TOTAL_ROUNDS}\n            </th>\n            <th>\n              <Button\n                style={{ margin: 'auto', display: 'block' }}\n                variant=\"primary\"\n                onClick={onClickPlay(i)}\n                disabled={stats.rounds >= TOTAL_ROUNDS}\n              >\n                <FontAwesomeIcon icon={faPlay} />\n              </Button>\n            </th>\n          </tr>\n        ))}\n        <tr style={{ backgroundColor: 'PaleTurquoise' }}>\n          <th>\n            <b>Sum</b>\n          </th>\n          <th>\n            <b>{allStats.reduce((pv, cv) => cv.best.wins + pv, 0)}</b>\n          </th>\n          <th>\n            <b>{allStats.reduce((pv, cv) => cv.best.losses + pv, 0)}</b>\n          </th>\n          <th>\n            <b>{allStats.reduce((pv, cv) => cv.best.draws + pv, 0)}</b>\n          </th>\n          <ScoreCell\n            score={allStats.reduce((pv, cv) => cv.best.score + pv, 0)}\n            total={NUM_ROUNDS * allStats.length}\n            par={allOpponents.reduce((pv, cv) => cv.par + pv, 0)}\n          />\n\n          <th>\n            <b>\n              {allStats.reduce((pv, cv) => cv.rounds + pv, 0)} /{' '}\n              {TOTAL_ROUNDS * allStats.length}\n            </b>\n          </th>\n          <th />\n        </tr>\n      </tbody>\n    </Table>\n\n    <Modal show={showModal} onHide={onHide}>\n      <Modal.Header closeButton>\n        <Modal.Title>Reset game</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        This will reset your whole progress and start a new game, are you sure\n        you want to proceed?\n      </Modal.Body>\n      <Modal.Footer>\n        <Button variant=\"secondary\" onClick={onHide}>\n          Cancel\n        </Button>\n        <Button variant=\"danger\" onClick={onClickReset}>\n          Reset Game\n        </Button>\n      </Modal.Footer>\n    </Modal>\n  </>\n);\n\nexport const SummaryTable = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(_SummaryTable);\n","import React, { Dispatch } from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport { SummaryTable } from './SummaryTable';\nimport { connect } from 'react-redux';\nimport Button from 'react-bootstrap/Button';\nimport { RootAction } from '../game/reducer';\nimport { switchViewToIntro } from '../game/actions';\n\nconst mapDispatchToProps = (dispatch: Dispatch<RootAction>) => ({\n  onClick: () => dispatch(switchViewToIntro())\n});\n\ntype SummaryProps = ReturnType<typeof mapDispatchToProps>;\n\nconst _Summary: React.FC<SummaryProps> = ({ onClick }) => (\n  <Container>\n    <Row style={{ justifyContent: 'center' }}>\n      <h1>Summary</h1>\n    </Row>\n    <Row style={{ justifyContent: 'center' }}>\n      <SummaryTable />\n    </Row>\n    <Row className=\"d-flex justify-content-end\">\n      <Button variant=\"secondary\" onClick={onClick}>\n        Back to Intro\n      </Button>\n    </Row>\n  </Container>\n);\n\nexport const Summary = connect(null, mapDispatchToProps)(_Summary);\n","import Container from 'react-bootstrap/Container';\nimport React, { Dispatch } from 'react';\nimport Row from 'react-bootstrap/Row';\nimport { TOTAL_ROUNDS, NUM_ROUNDS } from '../constants';\nimport { RootAction } from '../game/reducer';\nimport Button from 'react-bootstrap/Button';\nimport { connect } from 'react-redux';\nimport { switchViewToBasic } from '../game/actions';\n\nconst mapDispatchToProps = (dispatch: Dispatch<RootAction>) => ({\n  onClick: () => dispatch(switchViewToBasic())\n});\n\ntype IntroProps = ReturnType<typeof mapDispatchToProps>;\n\nconst _Intro: React.FC<IntroProps> = ({ onClick }) => (\n  <Container>\n    <Row style={{ justifyContent: 'center' }}>\n      <h1 style={{ fontSize: 40 }}>Read My Mind</h1>\n    </Row>\n    <Row style={{ justifyContent: 'center' }}>\n      <p>\n        Welcome to a little game we call <b>Read My Mind</b>. You will be\n        playing a classic game of rock-paper-scissors against multiple\n        opponents. You can play up to {TOTAL_ROUNDS} rounds against each of the\n        opponents. Your goal is to get the best possible score in a match\n        consisting of {NUM_ROUNDS} single games against each of these opponents.{' '}\n      </p>\n      <p>\n        Each opponent has its own strategy, which is only using the previous\n        rounds of your current match and also randomness. Pay close attention to\n        what they are doing, as only by fully understanding their strategy you\n        will be able to get the best possible scores.\n      </p>\n    </Row>\n    <Row>\n      <p>\n        Now, let us proceed to the summary screen, from where you will be able\n        to control the whole game.\n      </p>\n    </Row>\n    <Row style={{ justifyContent: 'center' }}>\n      <Button onClick={onClick}>I AM READY!</Button>\n    </Row>\n  </Container>\n);\n\nexport const Intro = connect(null, mapDispatchToProps)(_Intro);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { State } from '../game/state';\nimport { Game } from './Game';\nimport { Summary } from './Summary';\nimport { AppView } from '../game/types';\nimport { Intro } from './Intro';\n\nconst mapStateToProps = (state: State) => ({\n  activeView: state.activeView\n});\n\ntype Props = ReturnType<typeof mapStateToProps>;\n\nconst _MainView: React.FC<Props> = ({ activeView }) => {\n  switch (activeView) {\n    case AppView.Intro:\n      return <Intro />;\n    case AppView.Basic:\n      return <Summary />;\n    case AppView.BasicWithModal:\n      return <Summary />;\n    case AppView.Game:\n      return <Game />;\n    default:\n      throw new Error('Switching enum');\n  }\n};\n\nexport const MainView = connect(mapStateToProps)(_MainView);\n","import 'bootstrap/dist/css/bootstrap.css'\n\nimport React from 'react'\nimport './App.css'\nimport { Provider } from 'react-redux'\nimport { store } from './game/store'\nimport { MainView } from './components/MainView'\n\nconst App: React.FC = () => (\n  <Provider store={store}>\n    <div className=\"App\">\n      <MainView />\n    </div>\n  </Provider>\n)\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets  see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react' \nimport ReactDOM from 'react-dom' \nimport './index.css' \nimport App from './App' \nimport * as serviceWorker from './serviceWorker' \n\nReactDOM.render(<App />, document.getElementById('root')) \n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister() \n"],"sourceRoot":""}